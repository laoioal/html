javascript 정리

# 자바스크립트 포함방법

	1) HTML 문서 내부에 코드를 작성하는 방법
		
		<script type="text/javascript"></script> 
		
	2) 별도로 작성한 후 HTML 문서에 참조하는 방법
		
		<script type="text/javascript" src="/black/resources/js/day01/test04.js"></script>
		
------------------------------------------------------------------------------------------------

# 자바스크립트 데이터 타입

	1) 기본형
		number	: 정수 혹은 실수
		string	: 문자 혹은 문자열
		boolean	: 참 혹은 거짓
		array	: 데이터의 집합(배열)
		object	: 데이터 속성과 값으로 이루어진 집합
		null	: 객체 값이 없음
		undefined: 데이터 값이 정해지지 않음
		
	2) 객체 타입


	- 데이터 타입 확인하는 방법
		
		typeof 연산자
		
			typeof 100	: number
	
------------------------------------------------------------------------------------------------

# 변수 사용 방법

	사용 예
		- var x;					: 변수 x 선언
		- var y=10;					: 변수 y 선언 및 초기값 할당
		- var x=y;					: 변수 y의 값을 변수 x에 저장
		- var a, b, c;				: 변수 a, b, c 선언
		- var a=10, b=11, c=12;		: 변수 a, b, c 선언 및 각각 다른 초기값 할당
		- var a=b=c=10;				: 변수 a, b, c 선언 및 같은 초기값 할당
		- var name=“홍길동”, age=25;: 변수 name, age 선언 및 각각 다른 초기값 할당
		- var total=a+b+c;			: 변수 a, b, c 값을 더한 결과를 변수 total에 저장
		
	오류 예
		- var 7num=100;			: 숫자로 시작하는 변수명 잘못 사용
		- var &num=100;			: 특수 문자로 시작하는 변수명 잘못 사용
		- var true=1;			: 예약어를 변수명으로 잘못 사용
		- var 10=x;				: 좌변에 상수값 잘못 선언
		- var a+b=20;			: 좌변에 연산식 잘못 선언
		- var “홍길동”=name;	: 좌변에 문자열값 잘못 선언
		- var get Number=100;	: 변수명 사이에 공백(space) 잘못 선언
		- var a, b, c=100;		: 콤마로 구분한 변수명 잘못 선언
	
------------------------------------------------------------------------------------------------

# 변수 호이스팅(hoisting)

	- JavaScript 변수의 특이한 점은 예외를 받지 않고도, 나중에 선언된 변수를 참조할 수 있다는 것
	- JavaScript 변수가 어떤 의미에서 "끌어올려지거"나 함수나 문의 최상단으로 올려지는 것 (Hoisting)
	- 끌어올려진 변수는 undefined 값을 반환
		* 이 변수를 사용 혹은 참조한 후에 선언 및 초기화하더라도, 여전히 undefined를 반환

------------------------------------------------------------------------------------------------

# 자바스크립트 실행결과를 확인하는 방법
	
	- alert();			 			-> 결과를 대화 상자를 이용해서 출력
	- document.write();				-> 결과를 화면에 직접 출력
	- 요소.innerHTML = 출력문장 ;	-> 결과를 요소에 출력
	- console.log();				-> 웹브라우저의 콘솔창에 출력

------------------------------------------------------------------------------------------------

# HTML 문서 안의 특정 요소를 선택하는 방법

	- document.getElementById('아이디이름');		-> 아이디로 선택하는 방법
	- document.getElementsByName('name이름');		-> 네임으로 선택하는 방법
	- document.getElementsByTagName('태그이름') ;	-> 태그로 선택하는 방법
	- document.getElementsByClassName('클래스이름');-> 클래스로 선택하는 방법
	- document.querySelectorAll('요소.클래스');		-> 특정요소의 클래스로 선택
	
------------------------------------------------------------------------------------------------

# 제어문

	1) 조건문
		- if문				:  조건식이 참(true)이면 블록 내의 문장을 처리하고, 거짓(false)이면 블록을 빠져나감
		- if~else문			:  조건식이 참(true)인 경우와 거짓(false)인 경우 처리할 문장이 각각 따로 있을 때 사용하는 제어문
		- 다중 if~else문	:  두개 이상 조건식이 참(true)인 경우와 거짓(false)인 경우 처리할 문장이 각각 따로 있을 때 사용하는 제어문
		- wwitch~case문		:  조건문을 체크하여 다음에 처리할 문장의 위치를 파악한 후 해당 문장으로 가서 바로 처리
		
	2) 반복문
		- for문
		- while문
		- do-while문
		
	3) 보조 제어문
		- continue문
		- break문
		
------------------------------------------------------------------------------------------------		

# 함수의 반환값

	함수에 반환값이 있는 경우 return 반환값; 형식으로 값을 반환 해줄 수 있다.

	함수를 벼수에 담을 수도 있다.
	
------------------------------------------------------------------------------------------------

# 배열

	1) 리터럴로 생성하기
		
		var 배열명 = [원소1, 원소2, 원소3, ...]
		
			ex )
				var city=[]; // 배열 변수 선언
				city[0]="Seoul"; 
				city[1]="Busan";
				city[2]="Incheon";
				city[3]="Mokpo";
				city[4]="Sejeong";
				
	2) 객체로 생성하기
		
		var 배열명 = new array(원소1, 원소2, 원소3, ...)

			ex) var city = new Array("Seoul","Busan","Incheon"); 

------------------------------------------------------------------------------------------------

# 배열 객체 생성 확인 방법
		방법				   결과
	1) typeof ???			: object
	2) Array.isArray(???)	: true
	3) ??? instanceof Array	: true

------------------------------------------------------------------------------------------------

# 배열 함수
	1) join	
		배열에 저장된 모든 원소를 문자열로 변환한 후 연결하여 출력
		
			 var city=['서울', '부산', '대전']; 
			 var joindata1=city.join();
			 var joindata2=city.join('-');
			 var joindata3=city.join(' 그리고 ');
			 document.write('조인 결과1 : ' + joindata1 + '<p/>');	=> 서울,부산,대전
			 document.write('조인 결과2 : ' + joindata2 + '<p/>');	=> 서울-부산-대전
			 document.write('조인 결과3 : ' + joindata3 + '<p/>');	=> 서울 그리고 부산 그리고 대전
			
	2) concat
		지정된 배열에 두 개 이상의 데이터를 결합하거나 다른 배열 객체를 결합

			var city01=['서울', '부산', '대전']; 
			var city02=['대구', '광주', '인천']; 
			var city03=['전주', '부여', '세종']; 
			var data1=city01.concat('수원', '오산');
			var data2=city01.concat(city02);
			var data3=city01.concat(city03, city02);
			document.write('결과1 : ' + data1 + '<p/>');	=> 서울,부산,대전,수원,오산
			document.write('결과2 : ' + data2 + '<p/>');	=> 서울,부산,대전,대구,광주,인천
			document.write('결과3 : ' + data3 + '<p/>');	=> 서울,부산,대전,전주,부여,세종,대구,광주,인천
			
	3) reverse
		배열 원소의 순서를 반대로 정렬
		
			var data=[9, 8, 7, 6, 5, 4, 3, 2, 1]; 
			document.write('배열 : ' + data.join() + '<p/>');		=> 9,8,7,6,5,4,3,2,1
			var rdata=data.reverse(); // 배열 원소를 반대로 정렬
			document.write('결과 : ' + rdata + '<p/>');				=> 1,2,3,4,5,6,7,8,9
			
	4) sort
		배열 원소를 정렬
			
			var ndata1=[19, 38, 67, 26, 55, 24, 53, 12, 31]; 
			var ndata2=[132, 2, 41, 123, 45, 1234, 6, 29, 4567]; 
			var edata=['Apple', 'Html', 'Game', 'Computer', 'Java']; 
			var kdata=['서울', '부산', '구포', '대구', '인천']; 
			document.write('수치 정렬1 : ' + ndata1.sort() + '<p/>');								=> 12,19,24,26,31,38,53,55,67
			document.write('수치 정렬2 : ' + ndata2.sort() + '<p/>');								=> 123,1234,132,2,29,41,45,4567,6
			document.write('수치 정렬3 : ' + ndata2.sort(function(a, b) {return a - b;}) + '<p/>');	=> 2,6,29,41,45,123,132,1234,4567
			document.write('영문 정렬 : ' + edata.sort() + '<p/>');									=> Apple,Computer,Game,Html,Java
			document.write('한글 정렬 : ' + kdata.sort() + '<p/>'); 								=> 구포,대구,부산,서울,인천

	5) slice
		배열의 특정 범위에 속하는 원소만 선택하여 배열 생성
		
			var kdata=['서울', '부산', '구포', '대구', '인천', '대전', '세종']; 
			var str1=kdata.slice(0, 4);
			var str2=kdata.slice(2, -1);
			var str3=kdata.slice(-4, -2);
			document.write('부분 배열1 : ' + str1 + '<p/>');	=> 서울,부산,구포,대구
			document.write('부분 배열2 : ' + str2 + '<p/>');	=> 구포,대구,인천,대전
			document.write('부분 배열3 : ' + str3 + '<p/>');	=> 대구,인천
			
	6) splice
		배열의 원소 추가 또는 제거
		
			var kdata=['서울', '부산', '구포', '대구', '대전']; 
			var str1=kdata.splice(1, 2); 
			document.write('삭제 데이터 : ' + str1 + '<br>');	=> 부산,구포
			document.write('남은 배열 : ' + kdata + '<p/>');	=> 서울,대구,대전
			var str2=kdata.splice(1, 1, '강릉', '세종'); 
			document.write('삭제 데이터 : ' + str2 + '<br>');	=> 대구
			document.write('남은 배열 : ' + kdata + '<p/>');	=> 서울,강릉,세종,대전
			var str3=kdata.splice(2, Number.MAX_VALUE); 
			document.write('삭제 데이터 : ' + str3 + '<br>');	=> 세종,대전
			document.write('남은 배열 : ' + kdata + '<p/>');	=> 서울,강릉
	
	7) pop & push
		- push 메소드: 배열의 마지막 위치에 데이터를 추가하고 배열의 길이를 반환
		- pop 메소드: 배열의 마지막 위치에 있는 데이터를 삭제하고 삭제한 데이터를 반환
		
			var kdata=['서울', '부산', '구포', '대구', '대전']; 
			var p1=kdata.push('청주', '세종'); 
			document.write('데이터 : ' + p1 + '<br>'); 			=> 7
			document.write('배열 데이터 : ' + kdata + '<p/>');	=> 서울,부산,구포,대구,대전,청주,세종
			var p2=kdata.pop(); 
			document.write('데이터 : ' + p2 + '<br>'); 			=> 세종
			document.write('배열 데이터 : ' + kdata + '<p/>');	=> 서울,부산,구포,대구,대전,청주

	8) shift & unshift
		- shift 메소드: 배열의 맨 처음 위치에 데이터를 삭제하고 배열의 삭제된 데이터 반환
		- unshift 메소드: 배열의 맨 처음 위치에 데이터를 삽입하고 배열의 길이 반환
		
			var kdata=['서울', '부산']; 
			var p1=kdata.unshift('청주', '세종'); 
			document.write('데이터 : ' + p1 + '<br>'); 			=> 4
			document.write('배열 데이터 : ' + kdata + '<p/>');	=> 청주,세종,서울,부산
			var p2=kdata.shift(); 
			document.write('데이터 : ' + p2 + '<br>'); 			=> 청주
			document.write('배열 데이터 : ' + kdata + '<p/>');	=> 세종,서울,부산

	9) forEach
		 배열을 반복하며 저장된 데이터를 조회

			var kdata=['서울', '부산', '청주', '대구']; 
			function printArr(item, index) {	==> 데이터와 인덱스의 이름이 중요한것이 아니다. 둘의 위치가 바뀌면 결과도 바뀌어서 나온다.
				document.write('배열 데이터 [' + index + '] : ' + item + '<br>');
			}
			kdata.forEach(printArr);

				배열 데이터 [0] : 서울
				배열 데이터 [1] : 부산
				배열 데이터 [2] : 청주
				배열 데이터 [3] : 대구
				
				
				
			var data=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; 
			var sum=0;
			function addArr(value) {
			sum+=value; 
			}
			data.forEach(addArr); 
			document.write('배열 데이터 합 :' + sum + '<p/>');		=> 55
			
	10 ) map
		 배열의 데이터를 함수의 인자로 전달하고 함수의 수행 결과를 반환 받아 새로운 배열 생성
		 
			var data=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; 
			function mapArr(value) {
			return value*value; 
			}
			var mapdata=data.map(mapArr); 
			document.write('원래 배열 :' + data + '<p/>');					=> 1,2,3,4,5,6,7,8,9,10
			document.write('map 메소드 적용 배열 :' + mapdata + '<p/>');	=> 1,4,9,16,25,36,49,64,81,100
			
	11) filter
		배열의 데이터 중에 조건이 참인 데이터만 반환하여 새로운 배열 생성
		
			var data=[21, 42, 33, 14, 25, 12, 37, 28, 16, 11]; 
			function filterArr(value) {
			return value>=18; 
			}
			var fdata=data.filter(filterArr); 
			document.write('필터 전 배열 : ' + data + '<p/>');	=> 21,42,33,14,25,12,37,28,16,11
			document.write('필터 후 배열 : ' + fdata + '<p/>');	=> 21,42,33,25,37,28

	12) indexOf & lastIndexOf
		배열의 데이터를 검색하여 인덱스 위치를 반환
			- indexOf 메소드: 검색 시작 위치를 지정할 수 있음
			- lastIndexOf 메소드: 배열의 맨 마지막 원소부터 검색 시작
					
				var data=[10, 20, 30, 40, 30, 60, 70, 30, 90,100]; 
				document.write('배열 데이터 : [' + data + ']<p/>');									=> [10,20,30,40,30,60,70,30,90,100]
				document.write('처음부터 검색한 30의 인덱스 : ' + data.indexOf(30) + '<p/>');		=> 2
				document.write('마지막에서 검색한 30의 인덱스 : ' + data.lastIndexOf(30) + '<p/>');	=> 7
				document.write('세 번째부터 검색한 30의 인덱스 : ' + data.indexOf(30, 3) + '<p/>');	=> 4

------------------------------------------------------------------------------------------------

# 연관배열
	생성방법
		
		arr = {key1:value1, key2:value2, ....};

			var data={'f0':100, 'f1':200, 'f2':300}; 
			data['f3']=400; // 배열 데이터 저장
			data.f4=500; // 배열 데이터 저장
			document.write(data.f0 + '<br>'); // 'f0'키 데이터 조회	=> 100
			document.write(data.f1 + '<br>'); // 'f1'키 데이터 조회	=> 200
			document.write(data['f2'] + '<br>');					=> 300
			document.write(data['f3'] + '<br>');					=> 400
			document.write(data['f4'] + '<br>');					=> 500

------------------------------------------------------------------------------------------------

# 자바스크립트 이벤트
	
	문서로딩 이벤트	
		onabort		: 이미지를 로딩하는 작업이 사용자의 행동으로 인해 취소되었을 때
		onerror		: 이미지나 윈도우, 프레임을 로딩하는 동안 에러가 발생할 때
		onload		: 문서 로딩이 끝나면 이벤트 발생
		
	폼 이벤트
		onblur		: 문서나 윈도우, 프레임세트, 폼 요소에 현재 입력 포커스가 사라질 때
		onchange	: 텍스트 필드나 텍스트 영역, 파일 업로드 필드, 선택 항목이 변경되어 현재 입력 포커스가 사라질 때
		onfocus		: 문서나 윈도우, 프레임 세트, 폼 요소에 입력 포커스가 놓였을 때
		onmouse		: 사용자가 윈도우나 프레임에서 이동할 때
		onreset		: 폼의 리셋 버튼을 클릭하여 폼을 리셋시킬때

	마우스 이벤트
		onclick		: 링크나 클라이언트 측 이미지 맵 영역, 폼 요소가 클릭되었을 때
		ondbclick	: 링크나 클라이언트 측 이미지 맵 영역, 문서가 더블 클릭 되었을 때
		ondragdrop	: 드래그 된 객체가 윈도우나 프레임에 드롭되었을 때
		onmousedown	: 마우스 버튼 누를때
		onmousemove	: 마우스를 이동할 때
		onmouseover	: 어떠한 태그 요소 위로 마우스가 올라갈때
		onmouseout	: 어떠한 태그 요소 위에서 마우스 커서가 빠져나올 때
		onmouseup	: 사용자가  누르고 있던 마우스 버튼에서 손을 뗄 때

	키보드 이벤트
		onkeydown	: 키를 누를 때
		onkeypress	: 키를 눌렀다 놓았을 때
		onkeyup		: 키를 놓았을 때

------------------------------------------------------------------------------------------------

# 자바스크립트 내장객체

	1) 값의 처리를 위한 내장 객체
		Date		: 시스템의 현재 날짜, 시각을 조회하거나 계산하기 위한 기능 제공
		Array		: 같은 종류의 변수를 하나로 묶기 위한 배열에 관련된 기능 제공
		String		: 하나의문자열을 독립된 객체된 생성 문자열 안에 특정 글자가 시작하는 위치, 문자열 안에서 원하는 내용만 추출하는 등의 기능 제공
		Math		: 삼각함수, 지수, 로그 등 수학과 관련된 각종 고급 함수 제공(일반적으로 잘 사용되지 않음)
		
	2) 브라우저의 제어를 위한 내장 객체
		window		: 브라우저 창에 대한 모든 상황을 제어하는 최상위 객체 모든 브라우저 제어 관련 내장 객체는 window객체의 하위에 존재
		location	: URL 정보를 제어하는 객체 페이지이동, 현재주소조회, 새로 고침등의 기능 제공
		history		: 웹 브라우저에 기록되어 있는 히스토리 정보를 제어
		navigator	: 브라우저의 종류를 판별
		screen		: 브라우저 화면에 대한 정보를 알려준다. 변수값만 포함하고 있으며, 함수는 포함하고 있지 않다.
		
	3) HTML 문서를 제어하기 위한 내장 객체
		document	: 문서에 대한 정보, 즉 HTML 문서의 각 요소들을 제어하기 위한 기능
		image		: <img> 태그에 대한 속성을 제어하는 객체
		form		: 입력양식 컴포넌트를 위한 개별 객체들을 포함
		frame		: 웹페이지 안에 다른 웹 페이지를 포함하는 Frameset과 iframe을 제어하는 기능 제공
	
	4) String 객체
	length						 : 문자열의 길이를 조회
	String charAt(int)			 : 지정된 위치의 글자를 리턴
	int indexOf(String)			 : 문자열 앞에서부터 파라미터로 주어진 글자를 검색하여 위치를 알려준다. / 검색결과가 없는 경우 :1을 리턴
	int lastIndexOf(String)		 : 문자열 뒤에서부터 파라미터로 주어진 글자를 검색하여 위치를 알려준다. / 검색결과가 없는 경우 :1을 리턴
	String substring(int, int)	 : 문자열에서 첫번째 파라미터의 위치부터 두번째 파라미터 앞 인덱스까지 추출 / 두번째 파라미터가 없는경우 끝까지 추출
	String toUpperCase()		 : 대문자로 변환
	String toLowerCase() 		 : 소문자로 변환
	String slice(int, int)		 :  첫번째 파라미터 만큼 문자를 자르고 두번째 파라미터 이후의 문자를 자른 후 남은 문자 반환
	String replace(String, String) : 첫번째 파라미터의 문자를 찾아 두번째 파라미터로 바꾼 후 반환
	String match(String)		 : 파라미터의 문자를 찾아 최초 찾은 문자를 반환 / 없으면 null 반환
	int search(String)			 : 왼쪽부터 파라미터의 문자를 찾아 최초로 일치하는 인덱스 번호 반환
	String substr(int, int)		 : 첫번째 파라미터 위치에서부터 두번째 파라미터 개수만큼 문자열을 반환
	Array split(String)			 : 파라미터의 문자를 기준으로 문자데이터를 나누어 배열에 저장해서 반환
	String concat(String)		 : 문자열에 파라미터로 입력한 문자열을 더해서 반환
	String trim()				 : 문자 앞 뒤의 공백 문자를 삭제해서 반환

------------------------------------------------------------------------------------------------

# 정규 표현 객체
	
	정규 표현(RegExp) 객체는 입력 요소에 데이터를 규칙에 맞게 작성했는지 판단해서 알려주는 객체
	
	생성방법
		1) var 변수이름 = new RegExp(패턴, 검색옵션)
		
		2) var 변수이름 = /패턴/검색옵션
		
	정규 표현 검색 옵션
		
전방탐색자
	특정패턴을 기준으로 앞을 검색하는 탐색을 한다.
	/^((?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*_])){4,10}$/
	괄호를 여러개 나열하면 and의 의미
	
	<div><p>abcd</p></div>
	
	/^(?=<.*>)$/
	==> true
			<div>
			<div><p>
			<div><p>abcd</p>
			<div><p>abcd</p></div>
			<p>abcd</p>
			...
			너무 광범위하다.
	
	
	(?=.*?[!@#$%^*_])
	수량 뒤에 오는 ? 는 greedy
후방탐색자
	?<=
















